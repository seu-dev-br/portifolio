---
// P√°gina est√°tica - dados carregados via API
import Layout from '../layouts/Layout.astro';
import BlogPostSkeleton from '../components/BlogPostSkeleton.astro';
---

<Layout title="Blog - √çtalo Antonio" description="Artigos sobre desenvolvimento web, tecnologia e programa√ß√£o">
  <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <section class="blog-header text-center py-12">
      <h1 class="text-4xl sm:text-5xl font-extrabold mb-4 bg-gradient-to-r from-primary-400 via-accent-blue to-accent-cyan bg-clip-text text-transparent animate-gradient">Meu Blog</h1>
      <p class="text-lg text-gray-400 max-w-xl mx-auto mb-8">Compartilhando conhecimento sobre desenvolvimento web, tecnologia e programa√ß√£o.</p>
      
      <!-- Search Bar -->
      <div class="relative max-w-md mx-auto mb-6">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Buscar posts..." 
          class="w-full py-3 px-5 rounded-full border border-gray-700 bg-gray-800 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-400 transition-all" 
          aria-label="Buscar posts no blog" 
          tabindex="0"
        />
        <button id="clear-search" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white text-xl focus:outline-none focus:ring-2 focus:ring-primary-400 hidden" aria-label="Limpar busca" tabindex="0" role="button">√ó</button>
      </div>
      
      <!-- Filter Tags Container (ser√° preenchido via JS) -->
      <div id="filter-tags-container" class="flex flex-wrap justify-center gap-2 mb-4">
        <button class="filter-tag active px-4 py-2 rounded-full bg-gradient-to-r from-primary-400 to-accent-cyan text-white font-semibold shadow-sm transition-all" data-tag="all">Todos</button>
      </div>
    </section>

    <!-- Loading State -->
    <section id="posts-loading" class="py-16">
      <div class="posts-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        <BlogPostSkeleton />
        <BlogPostSkeleton />
        <BlogPostSkeleton />
      </div>
    </section>

    <!-- Posts Content (ser√° preenchido via JS) -->
    <section id="posts-content" class="hidden pb-16">
      <div id="posts-grid" class="posts-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Posts ser√£o carregados aqui -->
      </div>
    </section>

    <!-- Empty State -->
    <section id="no-posts" class="hidden py-16">
      <div class="empty-state text-center p-8 bg-gray-800/60 rounded-xl border border-gray-700">
        <h2 class="text-2xl font-bold text-gray-200 mb-2">Nenhum post publicado ainda</h2>
        <p class="text-gray-400 text-lg">Em breve voc√™ encontrar√° conte√∫do interessante por aqui!</p>
      </div>
    </section>
  </div>
</Layout>

<script>
// @ts-nocheck
  // Fun√ß√µes auxiliares
  function formatDate(timestamp) {
    if (!timestamp) return 'Data n√£o dispon√≠vel';
    const date = new Date(timestamp);
    return date.toLocaleDateString('pt-BR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  function getReadingTime(content) {
    if (!content) return '0 min';
    const wordsPerMinute = 200;
    const words = content.split(/\s+/).length;
    const minutes = Math.ceil(words / wordsPerMinute);
    return `${minutes} min`;
  }

  // Carregar posts da API
  async function loadPosts() {
    console.log('üîÑ [blog] Carregando posts da API...');
    
    try {
      const response = await fetch('/api/posts.json');

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const posts = await response.json();
      console.log(`‚úÖ [blog] ${posts.length} posts carregados`);

      const postsLoading = document.getElementById('posts-loading');
      const postsContent = document.getElementById('posts-content');
      const noPosts = document.getElementById('no-posts');
      const postsGrid = document.getElementById('posts-grid');
      const filterTagsContainer = document.getElementById('filter-tags-container');

      // Esconder loading
      if (postsLoading) postsLoading.classList.add('hidden');

      if (posts.length === 0) {
        // Mostrar empty state
        if (noPosts) noPosts.classList.remove('hidden');
        return;
      }

      // Extrair todas as tags √∫nicas
      const allTags = [...new Set(posts.flatMap(post => Array.isArray(post.tags) ? post.tags : []))];
      
      // Criar bot√µes de filtro de tags
      if (filterTagsContainer && allTags.length > 0) {
        filterTagsContainer.innerHTML = `
          <button class="filter-tag active px-4 py-2 rounded-full bg-gradient-to-r from-primary-400 to-accent-cyan text-white font-semibold shadow-sm transition-all" data-tag="all">Todos</button>
          ${allTags.map(tag => `
            <button class="filter-tag px-4 py-2 rounded-full bg-gray-700 text-gray-200 font-semibold border border-gray-600 hover:bg-primary-500 hover:text-white transition-all" data-tag="${tag}">${tag}</button>
          `).join('')}
        `;
      }

      // Renderizar posts
      if (postsGrid) {
        postsGrid.innerHTML = posts.map(post => {
          const tags = Array.isArray(post.tags) ? post.tags : [];
          const tagsMarkup = tags.map(tag => `
            <span class="tag bg-primary-900/20 text-primary-400 px-3 py-1 rounded-full text-xs font-medium border border-primary-400/30">${tag}</span>
          `).join('');
          const tagsSection = tags.length > 0 ? `
            <div class="post-tags flex flex-wrap gap-2 mb-4">
              ${tagsMarkup}
            </div>
          ` : '';

          return `
            <article class="post-card bg-gray-800/70 rounded-2xl overflow-hidden border border-gray-700 shadow-lg flex flex-col transition-all hover:-translate-y-2 hover:shadow-2xl" data-tags='${JSON.stringify(tags)}'>
              ${post.thumbnailUrl ? `
                <div class="post-image w-full h-56 overflow-hidden relative">
                  <a href="/blog/${post.slug}">
                    <img src="${post.thumbnailUrl}" alt="${post.title}" class="w-full h-full object-cover transition-transform duration-300 hover:scale-105" />
                  </a>
                </div>
              ` : ''}
              <div class="post-content flex flex-col flex-1 p-6">
                <div class="post-meta flex flex-wrap items-center justify-between text-sm text-gray-400 mb-3 gap-2">
                  <time datetime="${post.publishedAt ?? ''}">${formatDate(post.publishedAt)}</time>
                  <span class="reading-time">${getReadingTime(post.contentMarkdown)} de leitura</span>
                </div>
                <h2 class="text-xl font-bold mb-2 leading-tight">
                  <a href="/blog/${post.slug}" class="text-white hover:text-primary-400 transition-colors">${post.title}</a>
                </h2>
                <p class="post-excerpt text-gray-300 line-clamp-3 mb-4">${post.summary || 'Resumo n√£o dispon√≠vel.'}</p>
                ${tagsSection}
                <div class="read-more mt-auto">
                  <a href="/blog/${post.slug}" class="btn btn-outline inline-block px-5 py-2 rounded-lg border-2 border-primary-400 text-primary-400 font-semibold hover:bg-primary-400 hover:text-white transition-all">Ler Mais</a>
                </div>
              </div>
            </article>
          `;
        }).join('');
      }

      // Mostrar conte√∫do
      if (postsContent) postsContent.classList.remove('hidden');

      // Implementar busca e filtros
      setupSearchAndFilters();
      
    } catch (error) {
      console.error('‚ùå [blog] Erro ao carregar posts:', error);
      
      const postsLoading = document.getElementById('posts-loading');
      const noPosts = document.getElementById('no-posts');
      
      if (postsLoading) postsLoading.classList.add('hidden');
      if (noPosts) {
        noPosts.classList.remove('hidden');
        const heading = noPosts.querySelector('h2');
        if (heading) heading.textContent = 'Erro ao carregar posts';
        const paragraph = noPosts.querySelector('p');
        if (paragraph) paragraph.textContent = 'Tente novamente mais tarde.';
      }
    }
  }

  function setupSearchAndFilters() {
    const searchInput = document.getElementById('search-input');
    const clearSearchBtn = document.getElementById('clear-search');
    const filterTags = document.querySelectorAll('.filter-tag');
    const postCards = document.querySelectorAll('.post-card');

    let currentTag = 'all';

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        if (clearSearchBtn) {
          clearSearchBtn.classList.toggle('hidden', searchTerm === '');
        }

        filterPosts(searchTerm, currentTag);
      });
    }

    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', function() {
        if (searchInput) {
          searchInput.value = '';
          this.classList.add('hidden');
          filterPosts('', currentTag);
        }
      });
    }

    // Tag filtering
    filterTags.forEach(tag => {
      tag.addEventListener('click', function() {
        filterTags.forEach(t => t.classList.remove('active', 'bg-gradient-to-r', 'from-primary-400', 'to-accent-cyan'));
        filterTags.forEach(t => t.classList.add('bg-gray-700'));
        
        this.classList.add('active', 'bg-gradient-to-r', 'from-primary-400', 'to-accent-cyan');
        this.classList.remove('bg-gray-700');
        
        currentTag = this.getAttribute('data-tag') || 'all';
        const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
        filterPosts(searchTerm, currentTag);
      });
    });

    function filterPosts(searchTerm, tag) {
      postCards.forEach(card => {
        const title = card.querySelector('h2')?.textContent.toLowerCase() || '';
        const excerpt = card.querySelector('.post-excerpt')?.textContent.toLowerCase() || '';
        const tagsData = JSON.parse(card.getAttribute('data-tags') || '[]');
        
        const matchesSearch = title.includes(searchTerm) || excerpt.includes(searchTerm);
        const matchesTag = tag === 'all' || tagsData.includes(tag);
        
        if (matchesSearch && matchesTag) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
    }
  }

  // Carregar posts quando a p√°gina carregar
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPosts);
  } else {
    loadPosts();
  }
</script>
