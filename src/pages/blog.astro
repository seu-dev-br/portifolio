---
import Layout from '../layouts/Layout.astro';
import { getAllPublishedPosts, formatDate, getReadingTime } from '../lib/supabase';
import BlogPostSkeleton from '../components/BlogPostSkeleton.astro';
import OptimizedImage from '../components/OptimizedImage.astro';

const posts = await getAllPublishedPosts();
---

<Layout title="Blog - Ítalo Antonio" description="Artigos sobre desenvolvimento web, tecnologia e programação">
	<div class="container">
		<section class="blog-header">
			<h1>Meu Blog</h1>
			<p>Compartilhando conhecimento sobre desenvolvimento web, tecnologia e programação.</p>
			
			<!-- Search Bar -->
			<div class="search-container">
				<input 
					type="text" 
					id="search-input" 
					placeholder="Buscar posts..." 
					class="search-input focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-400" 
					aria-label="Buscar posts no blog" 
					tabindex="0"
				/>
				<button id="clear-search" class="clear-search focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-400" style="display: none;" aria-label="Limpar busca" tabindex="0" role="button">×</button>
			</div>
			
			<!-- Filter Tags -->
			<div class="filter-tags">
				<button class="filter-tag active focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-400" data-tag="all" aria-label="Filtrar por todos os posts" tabindex="0" role="button">Todos</button>
				{[...new Set(posts.flatMap(post => post.tags || []))].map(tag => (
					<button class="filter-tag focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-400" data-tag={tag} aria-label={`Filtrar por tag: ${tag}`} tabindex="0" role="button">{tag}</button>
				))}
			</div>
		</section>

		{posts.length === 0 ? (
			<section class="no-posts">
				<div class="empty-state">
					<h2>Nenhum post publicado ainda</h2>
					<p>Em breve você encontrará conteúdo interessante por aqui!</p>
				</div>
			</section>
		) : (
			<section class="posts-section">
				<div id="posts-loading" class="posts-grid">
					<!-- Loading skeletons -->
					<BlogPostSkeleton />
					<BlogPostSkeleton />
					<BlogPostSkeleton />
					<BlogPostSkeleton />
					<BlogPostSkeleton />
					<BlogPostSkeleton />
				</div>
				<div id="posts-content" class="posts-grid hidden">
					{posts.map((post) => (
						<article class="post-card">
							{post.coverImage && (
								<div class="post-image">
									<a href={`/blog/${post.slug}`}>
										   <OptimizedImage src={post.coverImage} alt={post.title} width={800} height={400} />
									</a>
								</div>
							)}
							<div class="post-content">
								<div class="post-meta">
									<time datetime={post.publishedAt}>
										{formatDate(post.publishedAt)}
									</time>
									<span class="reading-time">
										{getReadingTime(post.contentMarkdown)} de leitura
									</span>
								</div>
								<h2>
										<a href={`/blog/${post.slug}`} aria-label={`Ler post: ${post.title}`} tabindex="0" role="link">{post.title}</a>
								</h2>
								<p class="post-excerpt">{post.excerpt}</p>
								{post.tags && post.tags.length > 0 && (
									<div class="post-tags">
										          {post.tags.map((tag: string) => (
											<span class="tag">{tag}</span>
										))}
									</div>
								)}
								<div class="read-more">
									<a href={`/blog/${post.slug}`} class="btn btn-outline focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-400" aria-label={`Ler mais sobre: ${post.title}`} tabindex="0" role="link">Ler Mais</a>
								</div>
							</div>
						</article>
					))}
				</div>
			</section>
		)}
	</div>
</Layout>

<style>
	/* Blog Header */
	.blog-header {
		text-align: center;
		padding: 3rem 0 4rem;
	}

	.blog-header h1 {
		font-size: 3rem;
		margin-bottom: 1rem;
		background: linear-gradient(45deg, #af40ff, #5b42f3, #00ddeb);
		background-size: 400% 400%;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		animation: gradient 3s ease infinite;
	}

	@keyframes gradient {
		0% { background-position: 0% 50%; }
		50% { background-position: 100% 50%; }
		100% { background-position: 0% 50%; }
	}

	.blog-header p {
		font-size: 1.2rem;
		color: rgba(255, 255, 255, 0.7);
		max-width: 600px;
		margin: 0 auto 2rem;
	}

	/* Search Container */
	.search-container {
		position: relative;
		max-width: 400px;
		margin: 0 auto 2rem;
	}

	.search-input {
		width: 100%;
		padding: 12px 20px;
		border: 2px solid rgba(255, 255, 255, 0.1);
		border-radius: 25px;
		background: rgba(255, 255, 255, 0.05);
		color: white;
		font-size: 1rem;
		backdrop-filter: blur(10px);
		transition: all 0.3s ease;
	}

	.search-input:focus {
		outline: none;
		border-color: #af40ff;
		box-shadow: 0 0 20px rgba(175, 64, 255, 0.3);
	}

	.search-input::placeholder {
		color: rgba(255, 255, 255, 0.5);
	}

	.clear-search {
		position: absolute;
		right: 15px;
		top: 50%;
		transform: translateY(-50%);
		background: none;
		border: none;
		color: rgba(255, 255, 255, 0.6);
		font-size: 20px;
		cursor: pointer;
		padding: 0;
		width: 20px;
		height: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.clear-search:hover {
		color: white;
	}

	/* Filter Tags */
	.filter-tags {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 10px;
		margin-bottom: 1rem;
	}

	.filter-tag {
		padding: 8px 16px;
		background: rgba(255, 255, 255, 0.1);
		border: 1px solid rgba(255, 255, 255, 0.2);
		border-radius: 20px;
		color: rgba(255, 255, 255, 0.8);
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.3s ease;
		backdrop-filter: blur(10px);
	}

	.filter-tag:hover {
		background: rgba(175, 64, 255, 0.2);
		border-color: #af40ff;
		color: white;
	}

	.filter-tag.active {
		background: linear-gradient(45deg, #af40ff, #5b42f3);
		border-color: transparent;
		color: white;
	}

	/* Empty State */
	.no-posts {
		padding: 4rem 0;
	}

	.empty-state {
		text-align: center;
		padding: 3rem;
		background: rgba(255, 255, 255, 0.05);
		border-radius: 12px;
		border: 1px solid rgba(255, 255, 255, 0.1);
	}

	.empty-state h2 {
		margin-bottom: 1rem;
		color: rgba(255, 255, 255, 0.8);
	}

	.empty-state p {
		color: rgba(255, 255, 255, 0.6);
		font-size: 1.1rem;
	}

	/* Posts Grid */
	.posts-section {
		padding-bottom: 4rem;
	}

	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
		gap: 2.5rem;
	}

	/* Post Cards */
	.post-card {
		background: rgba(255, 255, 255, 0.05);
		border-radius: 16px;
		overflow: hidden;
		transition: all 0.3s ease;
		border: 1px solid rgba(255, 255, 255, 0.1);
		height: fit-content;
	}

	.post-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
		border-color: rgba(175, 64, 255, 0.3);
	}

	.post-image {
		width: 100%;
		height: 220px;
		overflow: hidden;
		position: relative;
	}

	.post-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.4s ease;
	}

	.post-card:hover .post-image img {
		transform: scale(1.1);
	}

	.post-content {
		padding: 2rem;
	}

	.post-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
		font-size: 0.9rem;
		color: rgba(255, 255, 255, 0.5);
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.post-content h2 {
		margin-bottom: 1rem;
		font-size: 1.4rem;
		line-height: 1.3;
	}

	.post-content h2 a {
		color: white;
		text-decoration: none;
		transition: color 0.3s ease;
	}

	.post-content h2 a:hover {
		color: #af40ff;
	}

	.post-excerpt {
		color: rgba(255, 255, 255, 0.7);
		line-height: 1.6;
		margin-bottom: 1.5rem;
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.post-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-bottom: 2rem;
	}

	.tag {
		background: rgba(175, 64, 255, 0.2);
		color: #af40ff;
		padding: 0.3rem 0.8rem;
		border-radius: 20px;
		font-size: 0.8rem;
		font-weight: 500;
		border: 1px solid rgba(175, 64, 255, 0.3);
	}

	.read-more {
		margin-top: auto;
	}

	.btn {
		display: inline-block;
		padding: 0.8rem 1.5rem;
		border-radius: 8px;
		text-decoration: none;
		font-weight: 600;
		transition: all 0.3s ease;
		border: 2px solid transparent;
		font-size: 0.9rem;
	}

	.btn-outline {
		background: transparent;
		color: #af40ff;
		border: 2px solid #af40ff;
	}

	.btn-outline:hover {
		background: #af40ff;
		color: white;
		transform: translateY(-2px);
	}

	/* Responsive */
	@media (max-width: 768px) {
		.blog-header h1 {
			font-size: 2.5rem;
		}

		.blog-header p {
			font-size: 1rem;
		}

		.posts-grid {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.post-content {
			padding: 1.5rem;
		}

		.post-meta {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.3rem;
		}
	}

	@media (max-width: 480px) {
		.posts-grid {
			grid-template-columns: 1fr;
		}

		.post-image {
			height: 180px;
		}
	}
</style>

<script>
	// Blog Search and Filter Functionality
	document.addEventListener('DOMContentLoaded', function() {
		const searchInput = document.getElementById('search-input');
		const clearSearchBtn = document.getElementById('clear-search');
		const filterTags = document.querySelectorAll('.filter-tag');
		const postCards = document.querySelectorAll('.post-card');

		let currentTag = 'all';

		// Search functionality
		if (searchInput) {
			searchInput.addEventListener('input', function(e) {
				const target = e.target as HTMLInputElement;
				const searchTerm = target?.value?.toLowerCase().trim() || '';
				
				if (searchTerm) {
					if (clearSearchBtn) clearSearchBtn.style.display = 'block';
				} else {
					if (clearSearchBtn) clearSearchBtn.style.display = 'none';
				}
				
				filterPosts(searchTerm, currentTag);
			});
		}

		// Clear search
		if (clearSearchBtn) {
			clearSearchBtn.addEventListener('click', function() {
				(searchInput as HTMLInputElement).value = '';
				clearSearchBtn.style.display = 'none';
				filterPosts('', currentTag);
			});
		}

		// Tag filter functionality
		filterTags.forEach(tag => {
			tag.addEventListener('click', function(this: HTMLElement) {
				// Remove active class from all tags
				filterTags.forEach(t => t.classList.remove('active'));
				// Add active class to clicked tag
				this.classList.add('active');
				
				currentTag = this.dataset.tag || '';
				const searchTerm = searchInput ? (searchInput as HTMLInputElement).value.toLowerCase().trim() : '';
				
				filterPosts(searchTerm, currentTag);
			});
		});

		function filterPosts(searchTerm: string, tag: string) {
			let visibleCount = 0;
			
			postCards.forEach(card => {
				const titleElement = card.querySelector('h2 a');
				const excerptElement = card.querySelector('.post-excerpt');
				const title = titleElement?.textContent?.toLowerCase() || '';
				const excerpt = excerptElement?.textContent?.toLowerCase() || '';
				const postTags = Array.from(card.querySelectorAll('.tag')).map(t => t.textContent?.toLowerCase() || '');
				
				const matchesSearch = !searchTerm || 
					title.includes(searchTerm) || 
					excerpt.includes(searchTerm) ||
					postTags.some(t => t.includes(searchTerm));
				
				const matchesTag = tag === 'all' || postTags.includes(tag.toLowerCase());
				
				if (matchesSearch && matchesTag) {
					(card as HTMLElement).style.display = 'block';
					(card as HTMLElement).style.animation = 'fadeIn 0.5s ease';
					visibleCount++;
				} else {
					(card as HTMLElement).style.display = 'none';
				}
			});

			// Show/hide empty state
			const emptyState = document.querySelector('.no-posts') as HTMLElement;
			const postsSection = document.querySelector('.posts-section') as HTMLElement;
			
			if (visibleCount === 0 && postCards.length > 0) {
				if (emptyState) emptyState.style.display = 'block';
				if (postsSection) postsSection.style.display = 'none';
			} else {
				if (emptyState) emptyState.style.display = 'none';
				if (postsSection) postsSection.style.display = 'block';
			}
		}
	});

	// Loading states management
	document.addEventListener('DOMContentLoaded', function() {
		const loadingElement = document.getElementById('posts-loading');
		const contentElement = document.getElementById('posts-content');

		if (loadingElement && contentElement) {
			// Simulate loading delay for better UX
			setTimeout(() => {
				loadingElement.classList.add('hidden');
				contentElement.classList.remove('hidden');
			}, 1000);
		}
	});
</script>
