---
import Layout from '../layouts/Layout.astro';
import { getAllPublishedPosts, formatDate, getReadingTime } from '../lib/supabase';
import BlogPostSkeleton from '../components/BlogPostSkeleton.astro';
import OptimizedImage from '../components/OptimizedImage.astro';

const posts = await getAllPublishedPosts();
---

<Layout title="Blog - Ítalo Antonio" description="Artigos sobre desenvolvimento web, tecnologia e programação">
  <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <section class="blog-header text-center py-12">
      <h1 class="text-4xl sm:text-5xl font-extrabold mb-4 bg-gradient-to-r from-primary-400 via-accent-blue to-accent-cyan bg-clip-text text-transparent animate-gradient">Meu Blog</h1>
      <p class="text-lg text-gray-400 max-w-xl mx-auto mb-8">Compartilhando conhecimento sobre desenvolvimento web, tecnologia e programação.</p>
      <!-- Search Bar -->
      <div class="relative max-w-md mx-auto mb-6">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Buscar posts..." 
          class="w-full py-3 px-5 rounded-full border border-gray-700 bg-gray-800 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-400 transition-all" 
          aria-label="Buscar posts no blog" 
          tabindex="0"
        />
        <button id="clear-search" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white text-xl focus:outline-none focus:ring-2 focus:ring-primary-400 hidden" aria-label="Limpar busca" tabindex="0" role="button">×</button>
      </div>
      <!-- Filter Tags -->
      <div class="flex flex-wrap justify-center gap-2 mb-4">
        <button class="filter-tag active px-4 py-2 rounded-full bg-gradient-to-r from-primary-400 to-accent-cyan text-white font-semibold shadow-sm transition-all focus:outline-none focus:ring-2 focus:ring-primary-400" data-tag="all" aria-label="Filtrar por todos os posts" tabindex="0" role="button">Todos</button>
        {[...new Set(posts.flatMap(post => post.tags || []))].map(tag => (
          <button class="filter-tag px-4 py-2 rounded-full bg-gray-700 text-gray-200 font-semibold border border-gray-600 hover:bg-primary-500 hover:text-white transition-all focus:outline-none focus:ring-2 focus:ring-primary-400" data-tag={tag} aria-label={`Filtrar por tag: ${tag}`} tabindex="0" role="button">{tag}</button>
        ))}
      </div>
    </section>
    {posts.length === 0 ? (
      <section class="no-posts py-16">
        <div class="empty-state text-center p-8 bg-gray-800/60 rounded-xl border border-gray-700">
          <h2 class="text-2xl font-bold text-gray-200 mb-2">Nenhum post publicado ainda</h2>
          <p class="text-gray-400 text-lg">Em breve você encontrará conteúdo interessante por aqui!</p>
        </div>
      </section>
    ) : (
      <section class="posts-section pb-16">
        <div id="posts-loading" class="posts-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          <!-- Loading skeletons -->
          <BlogPostSkeleton />
          <BlogPostSkeleton />
          <BlogPostSkeleton />
          <BlogPostSkeleton />
          <BlogPostSkeleton />
          <BlogPostSkeleton />
        </div>
        <div id="posts-content" class="posts-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 hidden">
          {posts.map((post) => (
            <article class="post-card bg-gray-800/70 rounded-2xl overflow-hidden border border-gray-700 shadow-lg flex flex-col transition-all hover:-translate-y-2 hover:shadow-2xl">
              {post.coverImage && (
                <div class="post-image w-full h-56 overflow-hidden relative">
                  <a href={`/blog/${post.slug}`}> <OptimizedImage src={post.coverImage} alt={post.title} width={800} height={400} class="w-full h-full object-cover transition-transform duration-300 hover:scale-105" /> </a>
                </div>
              )}
              <div class="post-content flex flex-col flex-1 p-6">
                <div class="post-meta flex flex-wrap items-center justify-between text-sm text-gray-400 mb-3 gap-2">
                  <time datetime={post.publishedAt}>{formatDate(post.publishedAt)}</time>
                  <span class="reading-time">{getReadingTime(post.contentMarkdown)} de leitura</span>
                </div>
                <h2 class="text-xl font-bold mb-2 leading-tight">
                  <a href={`/blog/${post.slug}`} class="text-white hover:text-primary-400 transition-colors" aria-label={`Ler post: ${post.title}`} tabindex="0" role="link">{post.title}</a>
                </h2>
                <p class="post-excerpt text-gray-300 line-clamp-3 mb-4">{post.excerpt}</p>
                {post.tags && post.tags.length > 0 && (
                  <div class="post-tags flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag: string) => (
                      <span class="tag bg-primary-900/20 text-primary-400 px-3 py-1 rounded-full text-xs font-medium border border-primary-400/30">{tag}</span>
                    ))}
                  </div>
                )}
                <div class="read-more mt-auto">
                  <a href={`/blog/${post.slug}`} class="btn btn-outline inline-block px-5 py-2 rounded-lg border-2 border-primary-400 text-primary-400 font-semibold hover:bg-primary-400 hover:text-white transition-all focus:outline-none focus:ring-2 focus:ring-primary-400" aria-label={`Ler mais sobre: ${post.title}`} tabindex="0" role="link">Ler Mais</a>
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    )}
  </div>
</Layout>

<script>
	// Blog Search and Filter Functionality
	document.addEventListener('DOMContentLoaded', function() {
		const searchInput = document.getElementById('search-input');
		const clearSearchBtn = document.getElementById('clear-search');
		const filterTags = document.querySelectorAll('.filter-tag');
		const postCards = document.querySelectorAll('.post-card');

		let currentTag = 'all';

		// Search functionality
		if (searchInput) {
			searchInput.addEventListener('input', function(e) {
				const target = e.target as HTMLInputElement;
				const searchTerm = target?.value?.toLowerCase().trim() || '';
				
				if (searchTerm) {
					if (clearSearchBtn) clearSearchBtn.style.display = 'block';
				} else {
					if (clearSearchBtn) clearSearchBtn.style.display = 'none';
				}
				
				filterPosts(searchTerm, currentTag);
			});
		}

		// Clear search
		if (clearSearchBtn) {
			clearSearchBtn.addEventListener('click', function() {
				(searchInput as HTMLInputElement).value = '';
				clearSearchBtn.style.display = 'none';
				filterPosts('', currentTag);
			});
		}

		// Tag filter functionality
		filterTags.forEach(tag => {
			tag.addEventListener('click', function(this: HTMLElement) {
				// Remove active class from all tags
				filterTags.forEach(t => t.classList.remove('active'));
				// Add active class to clicked tag
				this.classList.add('active');
				
				currentTag = this.dataset.tag || '';
				const searchTerm = searchInput ? (searchInput as HTMLInputElement).value.toLowerCase().trim() : '';
				
				filterPosts(searchTerm, currentTag);
			});
		});

		function filterPosts(searchTerm: string, tag: string) {
			let visibleCount = 0;
			
			postCards.forEach(card => {
				const titleElement = card.querySelector('h2 a');
				const excerptElement = card.querySelector('.post-excerpt');
				const title = titleElement?.textContent?.toLowerCase() || '';
				const excerpt = excerptElement?.textContent?.toLowerCase() || '';
				const postTags = Array.from(card.querySelectorAll('.tag')).map(t => t.textContent?.toLowerCase() || '');
				
				const matchesSearch = !searchTerm || 
					title.includes(searchTerm) || 
					excerpt.includes(searchTerm) ||
					postTags.some(t => t.includes(searchTerm));
				
				const matchesTag = tag === 'all' || postTags.includes(tag.toLowerCase());
				
				if (matchesSearch && matchesTag) {
					(card as HTMLElement).style.display = 'block';
					(card as HTMLElement).style.animation = 'fadeIn 0.5s ease';
					visibleCount++;
				} else {
					(card as HTMLElement).style.display = 'none';
				}
			});

			// Show/hide empty state
			const emptyState = document.querySelector('.no-posts') as HTMLElement;
			const postsSection = document.querySelector('.posts-section') as HTMLElement;
			
			if (visibleCount === 0 && postCards.length > 0) {
				if (emptyState) emptyState.style.display = 'block';
				if (postsSection) postsSection.style.display = 'none';
			} else {
				if (emptyState) emptyState.style.display = 'none';
				if (postsSection) postsSection.style.display = 'block';
			}
		}
	});

	// Loading states management
	document.addEventListener('DOMContentLoaded', function() {
		const loadingElement = document.getElementById('posts-loading');
		const contentElement = document.getElementById('posts-content');

		if (loadingElement && contentElement) {
			// Simulate loading delay for better UX
			setTimeout(() => {
				loadingElement.classList.add('hidden');
				contentElement.classList.remove('hidden');
			}, 1000);
		}
	});
</script>
