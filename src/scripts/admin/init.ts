// init.ts - Inicializa√ß√£o do painel administrativo (TypeScript)

// ==========================================
// DECLARA√á√ïES GLOBAIS
// ==========================================

declare global {
    function waitForSupabase(): Promise<any>;
    function initAuth(): Promise<void>;
    function login(email: string, password: string): Promise<void>;
    function logout(): Promise<void>;
    function showError(message: string): void;
}

// ==========================================
// ELEMENTOS DOM
// ==========================================

const loginForm = document.getElementById('login-form') as HTMLFormElement | null;
const logoutBtn = document.getElementById('logout-btn') as HTMLElement | null;

// ==========================================
// FUN√á√ÉO PRINCIPAL DE INICIALIZA√á√ÉO
// ==========================================

async function initApp(): Promise<void> {
    try {
        console.log('üöÄ Inicializando aplica√ß√£o admin...');

        // Aguardar o Supabase estar dispon√≠vel
        await waitForSupabase();

        // Inicializar autentica√ß√£o
        await initAuth();

        // Login form
        if (loginForm) {
            loginForm.addEventListener('submit', async (e: Event) => {
                e.preventDefault();
                const emailInput = document.getElementById('email') as HTMLInputElement;
                const passwordInput = document.getElementById('password') as HTMLInputElement;

                if (emailInput && passwordInput) {
                    const email = emailInput.value;
                    const password = passwordInput.value;
                    await login(email, password);
                }
            });
        }

        // Logout button
        if (logoutBtn) {
            logoutBtn.addEventListener('click', logout);
        }

        // Configurar outros event listeners se a fun√ß√£o estiver dispon√≠vel
        if (typeof window.setupAdminEventListeners === 'function') {
            window.setupAdminEventListeners();
        }

        console.log('‚úÖ Inicializa√ß√£o da aplica√ß√£o conclu√≠da');
    } catch (error: any) {
        console.error('‚ùå Erro ao inicializar a aplica√ß√£o:', error);
        if (typeof showError === 'function') {
            showError('Erro ao inicializar a aplica√ß√£o: ' + error.message);
        } else {
            alert('Erro ao inicializar a aplica√ß√£o: ' + error.message);
        }
    }
}

// ==========================================
// INICIALIZA√á√ÉO AUTOM√ÅTICA
// ==========================================

// Chamada para iniciar a aplica√ß√£o quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM carregado - iniciando aplica√ß√£o admin');

    // Verificar se o Supabase j√° est√° dispon√≠vel
    if (window.supabase) {
        console.log('‚úÖ Supabase j√° est√° dispon√≠vel no momento do carregamento do DOM');
    } else {
        console.log('‚è≥ Supabase ainda n√£o est√° dispon√≠vel, aguardando...');
    }

    // Iniciar a aplica√ß√£o
    initApp();
});

// Exportar fun√ß√£o para uso externo se necess√°rio
export { initApp };
