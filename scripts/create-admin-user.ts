// Script para criar um usu√°rio administrativo no Supabase
// Com confirma√ß√£o autom√°tica habilitada
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config({ path: '.env.local' });

const supabaseUrl: string | undefined = process.env.SUPABASE_URL;
const supabaseAnonKey: string | undefined = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente SUPABASE_URL ou SUPABASE_ANON_KEY n√£o encontradas!');
  console.log('Certifique-se de que o arquivo .env.local est√° configurado corretamente.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Configura√ß√£o do usu√°rio administrador
const adminEmail: string = 'admin@italo.dev';
const adminPassword: string = 'Italo2025Admin!';

async function createAdminUser(): Promise<void> {
  try {
    console.log('üîç Verificando se o usu√°rio j√° existe...');
    
    // Tentar fazer login para verificar se o usu√°rio existe
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: adminEmail,
      password: adminPassword
    });

    if (!signInError) {
      console.log('‚úÖ Usu√°rio j√° existe e est√° funcionando!');
      console.log(`   Email: ${adminEmail}`);
      
      // Fazer logout
      await supabase.auth.signOut();
      return;
    }

    // Se o erro n√£o for "Invalid login credentials", pode ser outro problema
    if (signInError.message !== 'Invalid login credentials') {
      console.log('‚ö†Ô∏è Erro ao verificar usu√°rio:', signInError.message);
    }

    console.log('üìù Criando novo usu√°rio administrador...');
    
    // Usar a API Admin para criar usu√°rio com email confirmado
    // Obs: isso requer a URL da fun√ß√£o Supabase Edge que n√£o temos acesso aqui
    // Como alternativa, usamos o m√©todo signUp padr√£o
    
    const { data, error } = await supabase.auth.signUp({
      email: adminEmail,
      password: adminPassword,
      options: {
        data: {
          role: 'admin'
        }
      }
    });

    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error.message);
      return;
    }

    console.log('‚úÖ Usu√°rio criado com sucesso!');
    if (data.user) {
      console.log(`   Email: ${data.user.email}`);
      console.log(`   ID: ${data.user.id}`);
    }
    console.log('\n‚ö†Ô∏è IMPORTANTE: ');
    console.log('1. Acesse o painel do Supabase: https://supabase.com/dashboard');
    console.log('2. V√° para: Authentication ‚Üí Users');
    console.log(`3. Encontre o usu√°rio: ${adminEmail}`);
    console.log('4. Clique em "Confirm email" para confirmar manualmente');
    console.log('\nOU');
    console.log('1. Acesse: Authentication ‚Üí Settings ‚Üí Email');
    console.log('2. Desmarque "Enable email confirmations"');
    console.log('3. Salve as configura√ß√µes');

  } catch (error: unknown) {
    let message = 'Erro desconhecido';
    if (error instanceof Error) message = error.message;
    else if (typeof error === 'string') message = error;
    console.error('‚ùå Erro geral:', message);
    process.exit(1);
  }
}

createAdminUser();
