#!/usr/bin/env node

// ===========================================
// üß™ SCRIPT DE TESTE DA INTEGRA√á√ÉO FRONTEND
// ===========================================
// Este script testa se toda a integra√ß√£o est√° funcionando
// Execute com: npm run test-integration

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Load environment variables
config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Missing Supabase environment variables');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

class IntegrationTester {
    private results: { [key: string]: boolean } = {};

    async runAllTests() {
        console.log('üöÄ Iniciando testes de integra√ß√£o frontend...\n');

        await this.testDatabaseConnection();
        await this.testSettingsAPI();
        await this.testProjectsAPI();
        await this.testPostsAPI();
        await this.testContactMessagesAPI();
        await this.testRLSPolicies();

        this.printResults();
        this.printNextSteps();
    }

    private async testDatabaseConnection() {
        console.log('1Ô∏è‚É£ Testando conex√£o com banco de dados...');
        try {
            const { data, error } = await supabase.from('settings').select('count').limit(1);
            if (error) throw error;
            this.results['database'] = true;
            console.log('‚úÖ Conex√£o com banco estabelecida');
        } catch (error) {
            this.results['database'] = false;
            console.log('‚ùå Falha na conex√£o com banco:', error instanceof Error ? error.message : String(error));
        }
    }

    private async testSettingsAPI() {
        console.log('\n2Ô∏è‚É£ Testando API de configura√ß√µes...');
        try {
            // Test home settings
            const { data: homeData, error: homeError } = await supabase
                .from('settings')
                .select('value')
                .eq('key', 'home')
                .single();

            if (homeError && homeError.code !== 'PGRST116') throw homeError;

            // Test about settings
            const { data: aboutData, error: aboutError } = await supabase
                .from('settings')
                .select('value')
                .eq('key', 'about')
                .single();

            if (aboutError && aboutError.code !== 'PGRST116') throw aboutError;

            this.results['settings_api'] = true;
            console.log('‚úÖ API de configura√ß√µes funcionando');
            console.log(`   üìÑ Home settings: ${homeData ? 'Encontradas' : 'Padr√£o'}`);
            console.log(`   üìÑ About settings: ${aboutData ? 'Encontradas' : 'Padr√£o'}`);
        } catch (error) {
            this.results['settings_api'] = false;
            console.log('‚ùå Falha na API de configura√ß√µes:', error instanceof Error ? error.message : String(error));
        }
    }

    private async testProjectsAPI() {
        console.log('\n3Ô∏è‚É£ Testando API de projetos...');
        try {
            const { data, error } = await supabase
                .from('projects')
                .select('*')
                .eq('status', 'published')
                .limit(5);

            if (error) throw error;

            this.results['projects_api'] = true;
            console.log('‚úÖ API de projetos funcionando');
            console.log(`   üìÑ Projetos publicados encontrados: ${data?.length || 0}`);
        } catch (error) {
            this.results['projects_api'] = false;
            console.log('‚ùå Falha na API de projetos:', error instanceof Error ? error.message : String(error));
        }
    }

    private async testPostsAPI() {
        console.log('\n4Ô∏è‚É£ Testando API de posts...');
        try {
            const { data, error } = await supabase
                .from('posts')
                .select('*')
                .eq('status', 'published')
                .limit(5);

            if (error) throw error;

            this.results['posts_api'] = true;
            console.log('‚úÖ API de posts funcionando');
            console.log(`   üìÑ Posts publicados encontrados: ${data?.length || 0}`);
        } catch (error) {
            this.results['posts_api'] = false;
            console.log('‚ùå Falha na API de posts:', error instanceof Error ? error.message : String(error));
        }
    }

    private async testContactMessagesAPI() {
        console.log('\n5Ô∏è‚É£ Testando API de mensagens de contato...');
        try {
            const { data, error } = await supabase
                .from('contact_messages')
                .select('id, name, email, status')
                .limit(5);

            if (error) throw error;

            this.results['messages_api'] = true;
            console.log('‚úÖ API de mensagens funcionando');
            console.log(`   üìÑ Mensagens encontradas: ${data?.length || 0}`);
        } catch (error) {
            this.results['messages_api'] = false;
            console.log('‚ùå Falha na API de mensagens:', error instanceof Error ? error.message : String(error));
        }
    }

    private async testRLSPolicies() {
        console.log('\n6Ô∏è‚É£ Testando pol√≠ticas RLS...');
        try {
            // Test if we can access settings without auth (should work for published content)
            const { data: settingsData, error: settingsError } = await supabase
                .from('settings')
                .select('key')
                .limit(1);

            if (settingsError) throw settingsError;

            // Test if we can access published projects without auth
            const { data: projectsData, error: projectsError } = await supabase
                .from('projects')
                .select('id, title, status')
                .eq('status', 'published')
                .limit(1);

            if (projectsError) throw projectsError;

            this.results['rls_policies'] = true;
            console.log('‚úÖ Pol√≠ticas RLS funcionando corretamente');
        } catch (error) {
            this.results['rls_policies'] = false;
            console.log('‚ùå Falha nas pol√≠ticas RLS:', error instanceof Error ? error.message : String(error));
        }
    }

    private printResults() {
        console.log('\n' + '='.repeat(50));
        console.log('üìä RESULTADOS DOS TESTES');
        console.log('='.repeat(50));

        const totalTests = Object.keys(this.results).length;
        const passedTests = Object.values(this.results).filter(Boolean).length;

        Object.entries(this.results).forEach(([test, passed]) => {
            const status = passed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
            const testName = test.replace('_', ' ').toUpperCase();
            console.log(`${status} - ${testName}`);
        });

        console.log('\n' + '-'.repeat(50));
        console.log(`üéØ RESULTADO FINAL: ${passedTests}/${totalTests} testes passaram`);

        if (passedTests === totalTests) {
            console.log('üéâ Todas as integra√ß√µes est√£o funcionando perfeitamente!');
        } else {
            console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
        }
    }

    private printNextSteps() {
        console.log('\n' + '='.repeat(50));
        console.log('üöÄ PR√ìXIMOS PASSOS');
        console.log('='.repeat(50));

        console.log('\n1. üñ•Ô∏è TESTE NO NAVEGADOR:');
        console.log('   ‚Ä¢ Abra http://localhost:4321');
        console.log('   ‚Ä¢ Abra o console (F12)');
        console.log('   ‚Ä¢ Procure por logs de carregamento das configura√ß√µes');

        console.log('\n2. üîß TESTE O ADMIN:');
        console.log('   ‚Ä¢ Acesse http://localhost:4321/admin');
        console.log('   ‚Ä¢ Fa√ßa login');
        console.log('   ‚Ä¢ Modifique configura√ß√µes e salve');
        console.log('   ‚Ä¢ Verifique se aparecem na p√°gina p√∫blica');

        console.log('\n3. üì± TESTE AS APIs:');
        console.log('   ‚Ä¢ GET /api/settings');
        console.log('   ‚Ä¢ GET /api/projects');
        console.log('   ‚Ä¢ GET /api/posts');

        console.log('\n4. üé® INTEGRA√á√ÉO NAS P√ÅGINAS:');
        console.log('   ‚Ä¢ Adicione o script nas p√°ginas p√∫blicas');
        console.log('   ‚Ä¢ Teste a atualiza√ß√£o autom√°tica');

        console.log('\n5. üìä MONITORAMENTO:');
        console.log('   ‚Ä¢ Verifique logs no console');
        console.log('   ‚Ä¢ Monitore performance das APIs');
        console.log('   ‚Ä¢ Teste em diferentes dispositivos');

        console.log('\nüí° DICAS:');
        console.log('   ‚Ä¢ Use window.frontendAPI para debug');
        console.log('   ‚Ä¢ Use window.settingsConfig para configura√ß√£o');
        console.log('   ‚Ä¢ Cache dura 5 minutos por padr√£o');

        console.log('\nüìö DOCUMENTA√á√ÉO:');
        console.log('   ‚Ä¢ Leia FRONTEND_INTEGRATION_README.md');
        console.log('   ‚Ä¢ Veja exemplos em src/lib/integration-examples.ts');
    }
}

// Executar testes
const tester = new IntegrationTester();
tester.runAllTests().catch(console.error);
